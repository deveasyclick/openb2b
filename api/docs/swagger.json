{
    "swagger": "2.0",
    "info": {
        "description": "Open-source multi-tenant ordering \u0026 invoicing platform API.",
        "title": "OpenB2B API",
        "termsOfService": "http://openb2b.com/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://openb2b.com/support",
            "email": "support@openb2b.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "1.0"
    },
    "host": "localhost:3000",
    "basePath": "/api/v1",
    "paths": {
        "/customers": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns a paginated list of customers. Supports filtering, sorting, searching, and preloading.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers"
                ],
                "summary": "List customers with filtering and pagination",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page (default: 20, max: 100)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort by field, e.g. 'created_at desc'",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Comma-separated list of relations to preload. relation must start with uppercase. e.g. 'Orders,Org'",
                        "name": "preloads",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Comma-separated list of fields to search (must be allowed)",
                        "name": "search_fields",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by first name",
                        "name": "first_name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by last name",
                        "name": "last_name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by phone number",
                        "name": "phone_number",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by email",
                        "name": "email",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by company",
                        "name": "company",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/customer.APIResponseCustomer"
                        }
                    },
                    "400": {
                        "description": "Invalid filter parameters",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new customer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers"
                ],
                "summary": "Create customers",
                "parameters": [
                    {
                        "description": "Customer payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateCustomerDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/customer.APIResponseCustomer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    }
                }
            }
        },
        "/customers/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a customer by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers"
                ],
                "summary": "Get customer",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Customer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/customer.APIResponseCustomer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a customer by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers"
                ],
                "summary": "Delete customer",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Customer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing customer by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "customers"
                ],
                "summary": "Update customer",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Customer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update customer payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateCustomerDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/customer.APIResponseCustomer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    }
                }
            }
        },
        "/invoices": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns a paginated list of invoices. Supports filtering, sorting, searching, and preloading.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "invoices"
                ],
                "summary": "List invoices with filtering and pagination",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page (default: 20, max: 100)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort by field, e.g. 'created_at desc'",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Comma-separated list of relations to preload. relation must start with uppercase. e.g. 'Orders,Org'",
                        "name": "preloads",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Comma-separated list of fields to search (must be allowed)",
                        "name": "search_fields",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by order number",
                        "name": "order_number",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by notes",
                        "name": "notes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by status",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/invoice.APIResponseInvoice"
                        }
                    },
                    "400": {
                        "description": "Invalid filter parameters",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new invoice",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "invoices"
                ],
                "summary": "Create invoices",
                "parameters": [
                    {
                        "description": "Invoice payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateInvoiceDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/invoice.APIResponseInvoice"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    }
                }
            }
        },
        "/invoices/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a invoice by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "invoices"
                ],
                "summary": "Get invoice",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Invoice ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/invoice.APIResponseInvoice"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a invoice by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "invoices"
                ],
                "summary": "Delete invoice",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Invoice ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing invoice by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "invoices"
                ],
                "summary": "Update invoice",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Invoice ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update invoice payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateInvoiceDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/invoice.APIResponseInvoice"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    }
                }
            }
        },
        "/invoices/{id}/issue": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Issue an invoice by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "invoices"
                ],
                "summary": "Issue an invoice",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Invoice ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.APIResponseString"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    }
                }
            }
        },
        "/orders": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns a paginated list of orders. Supports filtering, sorting, searching, and preloading.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "List orders with filtering and pagination",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page (default: 20, max: 100)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort by field, e.g. 'created_at desc'",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Comma-separated list of relations to preload. relation must start with uppercase",
                        "name": "preloads",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Comma-separated list of fields to search (must be allowed)",
                        "name": "search_fields",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by order number",
                        "name": "order_number",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by notes",
                        "name": "notes",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/order.APIResponseOrder"
                        }
                    },
                    "400": {
                        "description": "Invalid filter parameters",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new order",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Create orders",
                "parameters": [
                    {
                        "description": "Order payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateOrderDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/order.APIResponseOrder"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    }
                }
            }
        },
        "/orders/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a order by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Get order",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/order.APIResponseOrder"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a order by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Delete order",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing order by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "orders"
                ],
                "summary": "Update order",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Order ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update order payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateOrderDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/order.APIResponseOrder"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    }
                }
            }
        },
        "/orgs": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new organization",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organizations"
                ],
                "summary": "Create organization",
                "parameters": [
                    {
                        "description": "Organization payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateOrgDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Org"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    }
                }
            }
        },
        "/orgs/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get an organization by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organizations"
                ],
                "summary": "Get organization",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Organization ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Org"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing organization by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organizations"
                ],
                "summary": "Update organization",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Organization ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update organization payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateOrgDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Org"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete an organization by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organizations"
                ],
                "summary": "Delete organization",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Organization ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Deleted organization ID",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    }
                }
            }
        },
        "/products": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Returns a paginated list of products. Supports filtering, sorting, searching, and preloading.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "List products with filtering and pagination",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number (default: 1)",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page (default: 20, max: 100)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort by field, e.g. 'created_at desc'",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Comma-separated list of relations to preload. relation must start with uppercase",
                        "name": "preloads",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Comma-separated list of fields to search (must be allowed)",
                        "name": "search_fields",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by product name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by last name",
                        "name": "last_name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by phone number",
                        "name": "phone_number",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by email",
                        "name": "email",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/product.APIResponseProduct"
                        }
                    },
                    "400": {
                        "description": "Invalid filter parameters",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new product",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Create products",
                "parameters": [
                    {
                        "description": "Product payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateProductDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/product.APIResponseProduct"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    }
                }
            }
        },
        "/products/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a product by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Get product",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/product.APIResponseProduct"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a product by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Delete product",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing product by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "products"
                ],
                "summary": "Update product",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update product payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateProductDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/product.APIResponseProduct"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    }
                }
            }
        },
        "/products/{id}/variants/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a variant by product ID and variant ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "variants"
                ],
                "summary": "Get variant",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "productId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "variant ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/product.APIResponseVariant"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a variant by product ID and variant ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "variants"
                ],
                "summary": "Delete variant",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "productId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Variant ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    }
                }
            }
        },
        "/products/{productId}/variants": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new variant",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "variants"
                ],
                "summary": "Create variant",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "productId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Variant payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateProductVariantDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/product.APIResponseVariant"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    }
                }
            }
        },
        "/products/{productId}/variants/{id}": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing variant by product ID and variant ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "variants"
                ],
                "summary": "Update variant",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "productId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Variant ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update variant payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateVariantDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/product.APIResponseVariant"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/me": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get an authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get authenticated user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    }
                }
            }
        },
        "/webhooks/handleEvents": {
            "post": {
                "description": "Handles incoming webhook events from Clerk. The request body must match the WebhookEvent structure.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "webhooks"
                ],
                "summary": "Receive Clerk webhook events",
                "parameters": [
                    {
                        "description": "Webhook Event Payload",
                        "name": "event",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.WebhookEvent"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "apperrors.APIError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "internalMsg": {
                    "description": "detailed message for logs if code is 500",
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "apperrors.APIErrorResponse": {
            "description": "Error response object",
            "type": "object",
            "properties": {
                "code": {
                    "description": "Application-specific error code",
                    "type": "integer",
                    "example": 400
                },
                "message": {
                    "description": "Human-readable message for clients",
                    "type": "string",
                    "example": "invalid request body"
                }
            }
        },
        "customer.APIResponseCustomer": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/model.Customer"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "dto.AddressOptional": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "Address of the organization\nRequired: false",
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 5,
                    "example": "123 Market Street"
                },
                "city": {
                    "description": "City where the organization is located\nRequired: false",
                    "type": "string",
                    "maxLength": 30,
                    "minLength": 2,
                    "example": "San Francisco"
                },
                "country": {
                    "description": "Country where the organization is registered\nRequired: false",
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 2,
                    "example": "USA"
                },
                "state": {
                    "description": "State where the organization is located\nRequired: false",
                    "type": "string",
                    "maxLength": 30,
                    "minLength": 2,
                    "example": "California"
                },
                "zip": {
                    "description": "Zip where the organization is located\nRequired: false",
                    "type": "string",
                    "maxLength": 30,
                    "minLength": 2,
                    "example": "02912"
                }
            }
        },
        "dto.AddressRequired": {
            "description": "Address",
            "type": "object",
            "required": [
                "address",
                "city",
                "country",
                "state",
                "zip"
            ],
            "properties": {
                "address": {
                    "description": "Address of the organization\nRequired: true",
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 5,
                    "example": "123 Market Street"
                },
                "city": {
                    "description": "City where the organization is located\nRequired: true",
                    "type": "string",
                    "maxLength": 30,
                    "minLength": 2,
                    "example": "San Francisco"
                },
                "country": {
                    "description": "Country where the organization is registered\nRequired: true",
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 2,
                    "example": "USA"
                },
                "state": {
                    "description": "State where the organization is located\nRequired: true",
                    "type": "string",
                    "maxLength": 30,
                    "minLength": 2,
                    "example": "California"
                },
                "zip": {
                    "description": "Zip where the organization is located\nRequired: true",
                    "type": "string",
                    "maxLength": 30,
                    "minLength": 2,
                    "example": "02912"
                }
            }
        },
        "dto.CreateCustomerDTO": {
            "type": "object",
            "required": [
                "firstName",
                "lastName",
                "phoneNumber"
            ],
            "properties": {
                "address": {
                    "$ref": "#/definitions/dto.AddressOptional"
                },
                "company": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string",
                    "maxLength": 100
                },
                "lastName": {
                    "type": "string",
                    "maxLength": 100
                },
                "phoneNumber": {
                    "type": "string"
                }
            }
        },
        "dto.CreateDeliveryInfoDTO": {
            "type": "object",
            "required": [
                "address"
            ],
            "properties": {
                "address": {
                    "$ref": "#/definitions/dto.AddressRequired"
                },
                "transportFare": {
                    "type": "number",
                    "minimum": 0
                }
            }
        },
        "dto.CreateDiscountInfoDTO": {
            "type": "object",
            "required": [
                "type"
            ],
            "properties": {
                "amount": {
                    "type": "number",
                    "minimum": 0
                },
                "type": {
                    "enum": [
                        "percentage",
                        "fixed"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.DiscountType"
                        }
                    ]
                }
            }
        },
        "dto.CreateInvoiceDTO": {
            "type": "object",
            "required": [
                "orderId"
            ],
            "properties": {
                "notes": {
                    "type": "string"
                },
                "orderId": {
                    "type": "integer"
                }
            }
        },
        "dto.CreateOrderDTO": {
            "type": "object",
            "required": [
                "customerId",
                "delivery",
                "items"
            ],
            "properties": {
                "customerId": {
                    "type": "integer"
                },
                "delivery": {
                    "$ref": "#/definitions/dto.CreateDeliveryInfoDTO"
                },
                "discount": {
                    "$ref": "#/definitions/dto.CreateDiscountInfoDTO"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.CreateOrderItemDTO"
                    }
                },
                "notes": {
                    "type": "string",
                    "maxLength": 1000
                }
            }
        },
        "dto.CreateOrderItemDTO": {
            "type": "object",
            "required": [
                "quantity",
                "variantId"
            ],
            "properties": {
                "discount": {
                    "$ref": "#/definitions/dto.CreateDiscountInfoDTO"
                },
                "notes": {
                    "type": "string"
                },
                "quantity": {
                    "type": "integer",
                    "minimum": 1
                },
                "variantId": {
                    "type": "integer"
                }
            }
        },
        "dto.CreateOrgDTO": {
            "description": "Organization creation request",
            "type": "object",
            "required": [
                "email",
                "name",
                "organizationName",
                "phone"
            ],
            "properties": {
                "address": {
                    "$ref": "#/definitions/dto.AddressRequired"
                },
                "email": {
                    "description": "Contact email\nRequired: true",
                    "type": "string",
                    "example": "contact@openb2b.io"
                },
                "logo": {
                    "description": "Logo URL of the organization\nRequired: false",
                    "type": "string",
                    "example": "https://example.com/logo.png"
                },
                "name": {
                    "description": "Name of the organization (short name / brand)\nRequired: true\nMin length: 3\nMax length: 50",
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 3,
                    "example": "OpenB2B"
                },
                "organizationName": {
                    "description": "Full legal organization name\nRequired: true",
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 3,
                    "example": "OpenB2B Technologies Inc."
                },
                "organizationUrl": {
                    "description": "Official website URL\nRequired: false",
                    "type": "string",
                    "example": "https://openb2b.io"
                },
                "phone": {
                    "description": "Contact phone\nRequired: true",
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 10,
                    "example": "+1-202-555-0199"
                }
            }
        },
        "dto.CreateProductDTO": {
            "type": "object",
            "required": [
                "name",
                "variants"
            ],
            "properties": {
                "category": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2
                },
                "description": {
                    "type": "string",
                    "maxLength": 1000,
                    "minLength": 2
                },
                "imageUrl": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 2
                },
                "variants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.CreateProductVariantDTO"
                    }
                }
            }
        },
        "dto.CreateProductVariantDTO": {
            "type": "object",
            "required": [
                "price",
                "sku",
                "stock"
            ],
            "properties": {
                "color": {
                    "type": "string",
                    "maxLength": 30,
                    "minLength": 1
                },
                "price": {
                    "type": "number"
                },
                "size": {
                    "type": "string",
                    "maxLength": 30,
                    "minLength": 1
                },
                "sku": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2
                },
                "stock": {
                    "type": "integer",
                    "minimum": 0
                },
                "taxRate": {
                    "type": "number",
                    "maximum": 1,
                    "minimum": 0
                }
            }
        },
        "dto.UpdateCustomerDTO": {
            "type": "object",
            "properties": {
                "address": {
                    "$ref": "#/definitions/dto.AddressOptional"
                },
                "company": {
                    "type": "string",
                    "maxLength": 100
                },
                "email": {
                    "type": "string",
                    "maxLength": 100
                },
                "firstName": {
                    "type": "string",
                    "maxLength": 100
                },
                "lastName": {
                    "type": "string",
                    "maxLength": 100
                }
            }
        },
        "dto.UpdateDeliveryInfoDTO": {
            "type": "object",
            "properties": {
                "address": {
                    "$ref": "#/definitions/model.Address"
                },
                "date": {
                    "type": "string"
                },
                "status": {
                    "enum": [
                        "pending",
                        "shipped",
                        "delivered",
                        "cancelled"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.DeliveryStatus"
                        }
                    ]
                },
                "transportFare": {
                    "type": "number",
                    "minimum": 0
                }
            }
        },
        "dto.UpdateInvoiceDTO": {
            "type": "object",
            "properties": {
                "dueDate": {
                    "description": "Allow optional update of DueDate",
                    "type": "string"
                },
                "notes": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "draft",
                        "issued",
                        "paid",
                        "partially_paid",
                        "cancelled"
                    ]
                }
            }
        },
        "dto.UpdateOrderDTO": {
            "type": "object",
            "properties": {
                "customerId": {
                    "type": "integer"
                },
                "deliver": {
                    "$ref": "#/definitions/dto.UpdateDeliveryInfoDTO"
                },
                "discount": {
                    "$ref": "#/definitions/dto.CreateDiscountInfoDTO"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.CreateOrderItemDTO"
                    }
                },
                "notes": {
                    "type": "string",
                    "maxLength": 1000
                },
                "status": {
                    "enum": [
                        "pending",
                        "approved",
                        "delivered",
                        "cancelled"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.OrderStatus"
                        }
                    ]
                }
            }
        },
        "dto.UpdateOrgDTO": {
            "description": "Organization update request",
            "type": "object",
            "properties": {
                "address": {
                    "description": "Address of the organization",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.AddressOptional"
                        }
                    ]
                },
                "email": {
                    "description": "Contact email",
                    "type": "string",
                    "example": "contact@openb2b.io"
                },
                "logo": {
                    "description": "Logo URL of the organization",
                    "type": "string",
                    "example": "https://example.com/logo.png"
                },
                "name": {
                    "description": "Name of the organization",
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 3,
                    "example": "OpenB2B"
                },
                "organizationName": {
                    "description": "Full legal organization name",
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 3,
                    "example": "OpenB2B Technologies Inc."
                },
                "organizationUrl": {
                    "description": "Official website URL",
                    "type": "string",
                    "example": "https://openb2b.io"
                },
                "phone": {
                    "description": "Contact phone",
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 10,
                    "example": "+1-202-555-0199"
                }
            }
        },
        "dto.UpdateProductDTO": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 2
                },
                "description": {
                    "type": "string",
                    "maxLength": 1000,
                    "minLength": 2
                },
                "imageUrl": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 2
                }
            }
        },
        "dto.UpdateVariantDTO": {
            "type": "object",
            "properties": {
                "color": {
                    "type": "string",
                    "maxLength": 30,
                    "minLength": 1
                },
                "price": {
                    "type": "number"
                },
                "size": {
                    "type": "string",
                    "maxLength": 30,
                    "minLength": 1
                },
                "stock": {
                    "type": "integer",
                    "minimum": 0
                },
                "taxRate": {
                    "type": "number",
                    "maximum": 1,
                    "minimum": 0
                }
            }
        },
        "invoice.APIResponseInvoice": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/model.Invoice"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "model.Address": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "zip": {
                    "type": "string"
                }
            }
        },
        "model.Customer": {
            "type": "object",
            "required": [
                "firstName",
                "lastName"
            ],
            "properties": {
                "address": {
                    "$ref": "#/definitions/model.Address"
                },
                "company": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string",
                    "maxLength": 100
                },
                "id": {
                    "type": "integer"
                },
                "lastName": {
                    "type": "string",
                    "maxLength": 100
                },
                "orders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Order"
                    }
                },
                "org": {
                    "$ref": "#/definitions/model.Org"
                },
                "orgId": {
                    "type": "integer"
                },
                "phoneNumber": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "model.DeliveryInfo": {
            "type": "object",
            "properties": {
                "address": {
                    "$ref": "#/definitions/model.Address"
                },
                "at": {
                    "type": "string"
                },
                "date": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/model.DeliveryStatus"
                },
                "transportFare": {
                    "type": "number"
                }
            }
        },
        "model.DeliveryStatus": {
            "type": "string",
            "enum": [
                "pending",
                "shipped",
                "delivered",
                "cancelled"
            ],
            "x-enum-varnames": [
                "DeliveryPending",
                "DeliveryShipped",
                "DeliveryDelivered",
                "DeliveryCancelled"
            ]
        },
        "model.DiscountInfo": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "type": {
                    "$ref": "#/definitions/model.DiscountType"
                }
            }
        },
        "model.DiscountType": {
            "type": "string",
            "enum": [
                "percentage",
                "fixed"
            ],
            "x-enum-varnames": [
                "DiscountPercentage",
                "DiscountFixed"
            ]
        },
        "model.Invoice": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "customerAddress": {
                    "$ref": "#/definitions/model.Address"
                },
                "customerEmail": {
                    "type": "string"
                },
                "customerName": {
                    "type": "string"
                },
                "customerPhone": {
                    "type": "string"
                },
                "discountTotal": {
                    "type": "number"
                },
                "dueDate": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "invoiceNumber": {
                    "type": "string"
                },
                "issuedAt": {
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.InvoiceItem"
                    }
                },
                "notes": {
                    "type": "string"
                },
                "order": {
                    "$ref": "#/definitions/model.Order"
                },
                "orderId": {
                    "type": "integer"
                },
                "orgId": {
                    "type": "integer"
                },
                "pdf_url": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/model.InvoiceStatus"
                },
                "subtotal": {
                    "type": "number"
                },
                "taxTotal": {
                    "type": "number"
                },
                "total": {
                    "type": "number"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "model.InvoiceItem": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "invoiceID": {
                    "description": "Link to invoice",
                    "type": "integer"
                },
                "lineTotal": {
                    "description": "Quantity * UnitPrice + TaxAmount",
                    "type": "number"
                },
                "org": {
                    "$ref": "#/definitions/model.Org"
                },
                "orgID": {
                    "type": "integer"
                },
                "quantity": {
                    "type": "integer"
                },
                "sku": {
                    "type": "string"
                },
                "subtotal": {
                    "description": "Sum of all item totals before discount and tax",
                    "type": "number"
                },
                "taxAmount": {
                    "type": "number"
                },
                "unitPrice": {
                    "type": "number"
                },
                "updated_at": {
                    "type": "string"
                },
                "variant": {
                    "$ref": "#/definitions/model.Variant"
                },
                "variantID": {
                    "type": "integer"
                }
            }
        },
        "model.InvoiceStatus": {
            "type": "string",
            "enum": [
                "draft",
                "pro_forma",
                "issued",
                "paid",
                "overdue",
                "cancelled",
                "partially_paid"
            ],
            "x-enum-varnames": [
                "InvoiceStatusDraft",
                "InvoiceStatusProForma",
                "InvoiceStatusIssued",
                "InvoiceStatusPaid",
                "InvoiceStatusOverdue",
                "InvoiceStatusCancelled",
                "InvoiceStatusPartiallyPaid"
            ]
        },
        "model.Order": {
            "type": "object",
            "properties": {
                "appliedDiscount": {
                    "description": "Actual discount applied",
                    "type": "number"
                },
                "created_at": {
                    "type": "string"
                },
                "customer": {
                    "$ref": "#/definitions/model.Customer"
                },
                "customerId": {
                    "type": "integer"
                },
                "delivery": {
                    "$ref": "#/definitions/model.DeliveryInfo"
                },
                "discount": {
                    "$ref": "#/definitions/model.DiscountInfo"
                },
                "discountTotal": {
                    "description": "/ ItemDiscountTotal + AppliedDiscount",
                    "type": "number"
                },
                "id": {
                    "type": "integer"
                },
                "invoices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Invoice"
                    }
                },
                "itemDiscountTotal": {
                    "description": "sum of all per-item discounts",
                    "type": "number",
                    "format": "float64"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.OrderItem"
                    }
                },
                "notes": {
                    "type": "string"
                },
                "orderNumber": {
                    "type": "string"
                },
                "org": {
                    "$ref": "#/definitions/model.Org"
                },
                "orgId": {
                    "type": "integer"
                },
                "status": {
                    "$ref": "#/definitions/model.OrderStatus"
                },
                "subtotal": {
                    "description": "sum of item (unitPrice * qty), before discounts \u0026 tax",
                    "type": "number"
                },
                "taxAmount": {
                    "description": "Sum of all item tax amounts",
                    "type": "number"
                },
                "total": {
                    "description": "final payable amount = sum of all item totals",
                    "type": "number"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "model.OrderItem": {
            "type": "object",
            "properties": {
                "appliedDiscount": {
                    "description": "Actual discount applied",
                    "type": "number"
                },
                "appliedOrderDiscount": {
                    "description": "proportional share of order-level discount",
                    "type": "number"
                },
                "created_at": {
                    "type": "string"
                },
                "discount": {
                    "$ref": "#/definitions/model.DiscountInfo"
                },
                "id": {
                    "type": "integer"
                },
                "notes": {
                    "type": "string"
                },
                "orderId": {
                    "type": "integer"
                },
                "orgId": {
                    "type": "integer"
                },
                "product": {
                    "$ref": "#/definitions/model.Product"
                },
                "productId": {
                    "type": "integer"
                },
                "quantity": {
                    "type": "integer"
                },
                "sku": {
                    "type": "string"
                },
                "taxAmount": {
                    "description": "tax charged on this line (after discounts)",
                    "type": "number"
                },
                "taxRate": {
                    "description": "e.g., 0.10 for 10%",
                    "type": "number"
                },
                "total": {
                    "description": "(UnitPrice*Qty - discounts) + tax",
                    "type": "number"
                },
                "unitPrice": {
                    "type": "number"
                },
                "updated_at": {
                    "type": "string"
                },
                "variant": {
                    "$ref": "#/definitions/model.Variant"
                },
                "variantId": {
                    "type": "integer"
                }
            }
        },
        "model.OrderStatus": {
            "type": "string",
            "enum": [
                "pending",
                "approved",
                "delivered",
                "cancelled"
            ],
            "x-enum-varnames": [
                "OrderStatusPending",
                "OrderStatusApproved",
                "OrderStatusDelivered",
                "OrderStatusCancelled"
            ]
        },
        "model.Org": {
            "description": "Organization response model",
            "type": "object",
            "required": [
                "email",
                "name",
                "organizationName",
                "phone"
            ],
            "properties": {
                "address": {
                    "$ref": "#/definitions/model.Address"
                },
                "created_at": {
                    "type": "string"
                },
                "customers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Customer"
                    }
                },
                "email": {
                    "type": "string",
                    "maxLength": 50
                },
                "id": {
                    "type": "integer"
                },
                "logo": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "maxLength": 50
                },
                "onboardedAt": {
                    "type": "boolean"
                },
                "orders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Order"
                    }
                },
                "organizationName": {
                    "type": "string",
                    "maxLength": 50
                },
                "organizationUrl": {
                    "type": "string",
                    "maxLength": 100
                },
                "phone": {
                    "type": "string",
                    "maxLength": 50
                },
                "products": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Product"
                    }
                },
                "updated_at": {
                    "type": "string"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.User"
                    }
                }
            }
        },
        "model.Product": {
            "description": "Product response model",
            "type": "object",
            "properties": {
                "category": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "imageUrl": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "org": {
                    "$ref": "#/definitions/model.Org"
                },
                "orgId": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "variants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Variant"
                    }
                }
            }
        },
        "model.Role": {
            "type": "string",
            "enum": [
                "distributor",
                "admin",
                "viewer"
            ],
            "x-enum-varnames": [
                "RoleOwner",
                "RoleAdmin",
                "RoleViewer"
            ]
        },
        "model.User": {
            "description": "User response model",
            "type": "object",
            "required": [
                "email",
                "firstName",
                "lastName"
            ],
            "properties": {
                "address": {
                    "$ref": "#/definitions/model.Address"
                },
                "clerkId": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string",
                    "maxLength": 50
                },
                "firstName": {
                    "type": "string",
                    "maxLength": 100
                },
                "id": {
                    "type": "integer"
                },
                "lastName": {
                    "type": "string",
                    "maxLength": 100
                },
                "org": {
                    "description": "optional relation",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.Org"
                        }
                    ]
                },
                "orgId": {
                    "description": "nullable foreign key",
                    "type": "integer"
                },
                "phone": {
                    "type": "string",
                    "maxLength": 50
                },
                "role": {
                    "$ref": "#/definitions/model.Role"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "model.Variant": {
            "description": "Variant response model",
            "type": "object",
            "properties": {
                "color": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "orgId": {
                    "description": "needed for sku uniqueness per org",
                    "type": "integer"
                },
                "price": {
                    "type": "number"
                },
                "productId": {
                    "type": "integer"
                },
                "size": {
                    "type": "string"
                },
                "sku": {
                    "type": "string"
                },
                "stock": {
                    "type": "integer"
                },
                "taxRate": {
                    "type": "number"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "order.APIResponseOrder": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/model.Order"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "product.APIResponseProduct": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/model.Product"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "product.APIResponseVariant": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "$ref": "#/definitions/model.Variant"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "response.APIResponseString": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "types.WebhookEvent": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Event creation timestamp",
                    "type": "string",
                    "example": "2025-08-26T18:00:00Z"
                },
                "data": {
                    "description": "Data payload of the webhook",
                    "type": "object",
                    "additionalProperties": true
                },
                "id": {
                    "description": "ID of the webhook event",
                    "type": "string",
                    "example": "evt_123456"
                },
                "type": {
                    "description": "Type of the webhook event (e.g., \"user.created\")",
                    "type": "string",
                    "example": "user.created"
                },
                "webhook_id": {
                    "description": "ID of the webhook that triggered this event",
                    "type": "string",
                    "example": "wh_987654"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}