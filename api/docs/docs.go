// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://openb2b.com/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://openb2b.com/support",
            "email": "support@openb2b.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/orgs": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new organization",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organizations"
                ],
                "summary": "Create organization",
                "parameters": [
                    {
                        "description": "Organization payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/org.createDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Org"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    }
                }
            }
        },
        "/orgs/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get an organization by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organizations"
                ],
                "summary": "Get organization",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Organization ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Org"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing organization by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organizations"
                ],
                "summary": "Update organization",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Organization ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update organization payload",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/org.updateDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Org"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete an organization by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organizations"
                ],
                "summary": "Delete organization",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Organization ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Deleted organization ID",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/me": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get an authenticated user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get authenticated user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    }
                }
            }
        },
        "/webhooks/handleEvents": {
            "post": {
                "description": "Handles incoming webhook events from Clerk. The request body must match the WebhookEvent structure.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "webhooks"
                ],
                "summary": "Receive Clerk webhook events",
                "parameters": [
                    {
                        "description": "Webhook Event Payload",
                        "name": "event",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/types.WebhookEvent"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apperrors.APIErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "apperrors.APIErrorResponse": {
            "description": "Error response object",
            "type": "object",
            "properties": {
                "code": {
                    "description": "Application-specific error code",
                    "type": "integer",
                    "example": 400
                },
                "message": {
                    "description": "Human-readable message for clients",
                    "type": "string",
                    "example": "invalid request body"
                }
            }
        },
        "model.Address": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "zip": {
                    "type": "string"
                }
            }
        },
        "model.Customer": {
            "type": "object",
            "required": [
                "firstName",
                "lastName"
            ],
            "properties": {
                "address": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "company": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string",
                    "maxLength": 100
                },
                "id": {
                    "type": "integer"
                },
                "lastName": {
                    "type": "string",
                    "maxLength": 100
                },
                "orders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Order"
                    }
                },
                "org": {
                    "$ref": "#/definitions/model.Org"
                },
                "orgId": {
                    "type": "integer"
                },
                "phoneNumber": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "model.DeliveryInfo": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "at": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "date": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/model.DeliveryStatus"
                },
                "transportFare": {
                    "type": "number"
                }
            }
        },
        "model.DeliveryStatus": {
            "type": "string",
            "enum": [
                "pending",
                "shipped",
                "delivered",
                "cancelled"
            ],
            "x-enum-varnames": [
                "DeliveryPending",
                "DeliveryShipped",
                "DeliveryDelivered",
                "DeliveryCancelled"
            ]
        },
        "model.DiscountInfo": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "type": {
                    "$ref": "#/definitions/model.DiscountType"
                }
            }
        },
        "model.DiscountType": {
            "type": "string",
            "enum": [
                "percentage",
                "fixed"
            ],
            "x-enum-varnames": [
                "DiscountPercentage",
                "DiscountFixed"
            ]
        },
        "model.Order": {
            "type": "object",
            "properties": {
                "createdBy": {
                    "$ref": "#/definitions/model.User"
                },
                "created_at": {
                    "type": "string"
                },
                "customerId": {
                    "type": "integer"
                },
                "delivery": {
                    "$ref": "#/definitions/model.DeliveryInfo"
                },
                "discount": {
                    "$ref": "#/definitions/model.DiscountInfo"
                },
                "distributorId": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "notes": {
                    "type": "string"
                },
                "orderItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.OrderItem"
                    }
                },
                "org": {
                    "$ref": "#/definitions/model.Org"
                },
                "orgId": {
                    "type": "integer"
                },
                "requestedFor": {
                    "$ref": "#/definitions/model.Customer"
                },
                "status": {
                    "$ref": "#/definitions/model.OrderStatus"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "model.OrderItem": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "order": {
                    "$ref": "#/definitions/model.Order"
                },
                "orderId": {
                    "type": "integer"
                },
                "price": {
                    "type": "number"
                },
                "product": {
                    "$ref": "#/definitions/model.Product"
                },
                "productId": {
                    "type": "integer"
                },
                "quantity": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "model.OrderStatus": {
            "type": "string",
            "enum": [
                "pending",
                "approved",
                "delivered",
                "cancelled"
            ],
            "x-enum-varnames": [
                "OrderStatusPending",
                "OrderStatusApproved",
                "OrderStatusDelivered",
                "OrderStatusCancelled"
            ]
        },
        "model.Org": {
            "description": "Organization response model",
            "type": "object",
            "required": [
                "email",
                "name",
                "organizationName",
                "phone"
            ],
            "properties": {
                "address": {
                    "$ref": "#/definitions/model.Address"
                },
                "created_at": {
                    "type": "string"
                },
                "customers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Customer"
                    }
                },
                "email": {
                    "type": "string",
                    "maxLength": 50
                },
                "id": {
                    "type": "integer"
                },
                "logo": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "maxLength": 50
                },
                "onboardedAt": {
                    "type": "boolean"
                },
                "orders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Order"
                    }
                },
                "organizationName": {
                    "type": "string",
                    "maxLength": 50
                },
                "organizationUrl": {
                    "type": "string",
                    "maxLength": 100
                },
                "phone": {
                    "type": "string",
                    "maxLength": 50
                },
                "products": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Product"
                    }
                },
                "updated_at": {
                    "type": "string"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Customer"
                    }
                }
            }
        },
        "model.Product": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "org": {
                    "$ref": "#/definitions/model.Org"
                },
                "orgId": {
                    "type": "integer"
                },
                "price": {
                    "type": "number"
                },
                "quantity": {
                    "type": "integer"
                },
                "sku": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "model.Role": {
            "type": "string",
            "enum": [
                "distributor",
                "admin",
                "viewer"
            ],
            "x-enum-varnames": [
                "RoleOwner",
                "RoleAdmin",
                "RoleViewer"
            ]
        },
        "model.User": {
            "description": "User response model",
            "type": "object",
            "required": [
                "email",
                "firstName",
                "lastName"
            ],
            "properties": {
                "address": {
                    "$ref": "#/definitions/model.Address"
                },
                "clerkId": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string",
                    "maxLength": 50
                },
                "firstName": {
                    "type": "string",
                    "maxLength": 100
                },
                "id": {
                    "type": "integer"
                },
                "lastName": {
                    "type": "string",
                    "maxLength": 100
                },
                "org": {
                    "description": "optional relation",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.Org"
                        }
                    ]
                },
                "orgId": {
                    "description": "nullable foreign key",
                    "type": "integer"
                },
                "phone": {
                    "type": "string",
                    "maxLength": 50
                },
                "role": {
                    "$ref": "#/definitions/model.Role"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "org.Address": {
            "description": "Address",
            "type": "object",
            "required": [
                "address",
                "city",
                "country",
                "state",
                "zip"
            ],
            "properties": {
                "address": {
                    "description": "Address of the organization\nRequired: true",
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 5,
                    "example": "123 Market Street"
                },
                "city": {
                    "description": "City where the organization is located\nRequired: true",
                    "type": "string",
                    "maxLength": 30,
                    "minLength": 2,
                    "example": "San Francisco"
                },
                "country": {
                    "description": "Country where the organization is registered\nRequired: true",
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 2,
                    "example": "USA"
                },
                "state": {
                    "description": "State where the organization is located\nRequired: true",
                    "type": "string",
                    "maxLength": 30,
                    "minLength": 2,
                    "example": "California"
                },
                "zip": {
                    "description": "Zip where the organization is located\nRequired: true",
                    "type": "string",
                    "maxLength": 30,
                    "minLength": 2,
                    "example": "02912"
                }
            }
        },
        "org.createDTO": {
            "description": "Organization creation request",
            "type": "object",
            "required": [
                "email",
                "name",
                "organizationName",
                "phone"
            ],
            "properties": {
                "address": {
                    "$ref": "#/definitions/org.Address"
                },
                "email": {
                    "description": "Contact email\nRequired: true",
                    "type": "string",
                    "example": "contact@openb2b.io"
                },
                "logo": {
                    "description": "Logo URL of the organization\nRequired: false",
                    "type": "string",
                    "example": "https://example.com/logo.png"
                },
                "name": {
                    "description": "Name of the organization (short name / brand)\nRequired: true\nMin length: 3\nMax length: 50",
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 3,
                    "example": "OpenB2B"
                },
                "organizationName": {
                    "description": "Full legal organization name\nRequired: true",
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 3,
                    "example": "OpenB2B Technologies Inc."
                },
                "organizationUrl": {
                    "description": "Official website URL\nRequired: false",
                    "type": "string",
                    "example": "https://openb2b.io"
                },
                "phone": {
                    "description": "Contact phone\nRequired: true",
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 10,
                    "example": "+1-202-555-0199"
                }
            }
        },
        "org.updateDTO": {
            "description": "Organization update request",
            "type": "object",
            "properties": {
                "address": {
                    "description": "Address of the organization",
                    "allOf": [
                        {
                            "$ref": "#/definitions/org.Address"
                        }
                    ]
                },
                "email": {
                    "description": "Contact email",
                    "type": "string",
                    "example": "contact@openb2b.io"
                },
                "logo": {
                    "description": "Logo URL of the organization",
                    "type": "string",
                    "example": "https://example.com/logo.png"
                },
                "name": {
                    "description": "Name of the organization",
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 3,
                    "example": "OpenB2B"
                },
                "organizationName": {
                    "description": "Full legal organization name",
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 3,
                    "example": "OpenB2B Technologies Inc."
                },
                "organizationUrl": {
                    "description": "Official website URL",
                    "type": "string",
                    "example": "https://openb2b.io"
                },
                "phone": {
                    "description": "Contact phone",
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 10,
                    "example": "+1-202-555-0199"
                }
            }
        },
        "types.WebhookEvent": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Event creation timestamp",
                    "type": "string",
                    "example": "2025-08-26T18:00:00Z"
                },
                "data": {
                    "description": "Data payload of the webhook",
                    "type": "object",
                    "additionalProperties": true
                },
                "id": {
                    "description": "ID of the webhook event",
                    "type": "string",
                    "example": "evt_123456"
                },
                "type": {
                    "description": "Type of the webhook event (e.g., \"user.created\")",
                    "type": "string",
                    "example": "user.created"
                },
                "webhook_id": {
                    "description": "ID of the webhook that triggered this event",
                    "type": "string",
                    "example": "wh_987654"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:3000",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "OpenB2B API",
	Description:      "Open-source multi-tenant ordering & invoicing platform API.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
