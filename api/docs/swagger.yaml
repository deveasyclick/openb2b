basePath: /api/v1
definitions:
  apperrors.APIError:
    properties:
      code:
        type: integer
      internalMsg:
        description: detailed message for logs if code is 500
        type: string
      message:
        type: string
    type: object
  apperrors.APIErrorResponse:
    description: Error response object
    properties:
      code:
        description: Application-specific error code
        example: 400
        type: integer
      message:
        description: Human-readable message for clients
        example: invalid request body
        type: string
    type: object
  customer.APIResponseCustomer:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/model.Customer'
      message:
        type: string
    type: object
  dto.AddressOptional:
    properties:
      address:
        description: |-
          Address of the organization
          Required: false
        example: 123 Market Street
        maxLength: 100
        minLength: 5
        type: string
      city:
        description: |-
          City where the organization is located
          Required: false
        example: San Francisco
        maxLength: 30
        minLength: 2
        type: string
      country:
        description: |-
          Country where the organization is registered
          Required: false
        example: USA
        maxLength: 100
        minLength: 2
        type: string
      state:
        description: |-
          State where the organization is located
          Required: false
        example: California
        maxLength: 30
        minLength: 2
        type: string
      zip:
        description: |-
          Zip where the organization is located
          Required: false
        example: "02912"
        maxLength: 30
        minLength: 2
        type: string
    type: object
  dto.AddressRequired:
    description: Address
    properties:
      address:
        description: |-
          Address of the organization
          Required: true
        example: 123 Market Street
        maxLength: 100
        minLength: 5
        type: string
      city:
        description: |-
          City where the organization is located
          Required: true
        example: San Francisco
        maxLength: 30
        minLength: 2
        type: string
      country:
        description: |-
          Country where the organization is registered
          Required: true
        example: USA
        maxLength: 100
        minLength: 2
        type: string
      state:
        description: |-
          State where the organization is located
          Required: true
        example: California
        maxLength: 30
        minLength: 2
        type: string
      zip:
        description: |-
          Zip where the organization is located
          Required: true
        example: "02912"
        maxLength: 30
        minLength: 2
        type: string
    required:
    - address
    - city
    - country
    - state
    - zip
    type: object
  dto.CreateCustomerDTO:
    properties:
      address:
        $ref: '#/definitions/dto.AddressOptional'
      company:
        type: string
      email:
        type: string
      firstName:
        maxLength: 100
        type: string
      lastName:
        maxLength: 100
        type: string
      phoneNumber:
        type: string
    required:
    - firstName
    - lastName
    - phoneNumber
    type: object
  dto.CreateDeliveryInfoDTO:
    properties:
      address:
        $ref: '#/definitions/dto.AddressRequired'
      transportFare:
        minimum: 0
        type: number
    required:
    - address
    type: object
  dto.CreateDiscountInfoDTO:
    properties:
      amount:
        minimum: 0
        type: number
      type:
        allOf:
        - $ref: '#/definitions/model.DiscountType'
        enum:
        - percentage
        - fixed
    required:
    - type
    type: object
  dto.CreateInvoiceDTO:
    properties:
      notes:
        type: string
      orderId:
        type: integer
    required:
    - orderId
    type: object
  dto.CreateOrderDTO:
    properties:
      customerId:
        type: integer
      delivery:
        $ref: '#/definitions/dto.CreateDeliveryInfoDTO'
      discount:
        $ref: '#/definitions/dto.CreateDiscountInfoDTO'
      items:
        items:
          $ref: '#/definitions/dto.CreateOrderItemDTO'
        type: array
      notes:
        maxLength: 1000
        type: string
    required:
    - customerId
    - delivery
    - items
    type: object
  dto.CreateOrderItemDTO:
    properties:
      discount:
        $ref: '#/definitions/dto.CreateDiscountInfoDTO'
      notes:
        type: string
      quantity:
        minimum: 1
        type: integer
      variantId:
        type: integer
    required:
    - quantity
    - variantId
    type: object
  dto.CreateOrgDTO:
    description: Organization creation request
    properties:
      address:
        $ref: '#/definitions/dto.AddressRequired'
      email:
        description: |-
          Contact email
          Required: true
        example: contact@openb2b.io
        type: string
      logo:
        description: |-
          Logo URL of the organization
          Required: false
        example: https://example.com/logo.png
        type: string
      name:
        description: |-
          Name of the organization (short name / brand)
          Required: true
          Min length: 3
          Max length: 50
        example: OpenB2B
        maxLength: 50
        minLength: 3
        type: string
      organizationName:
        description: |-
          Full legal organization name
          Required: true
        example: OpenB2B Technologies Inc.
        maxLength: 50
        minLength: 3
        type: string
      organizationUrl:
        description: |-
          Official website URL
          Required: false
        example: https://openb2b.io
        type: string
      phone:
        description: |-
          Contact phone
          Required: true
        example: +1-202-555-0199
        maxLength: 50
        minLength: 10
        type: string
    required:
    - email
    - name
    - organizationName
    - phone
    type: object
  dto.CreateProductDTO:
    properties:
      category:
        maxLength: 50
        minLength: 2
        type: string
      description:
        maxLength: 1000
        minLength: 2
        type: string
      imageUrl:
        type: string
      name:
        maxLength: 100
        minLength: 2
        type: string
      variants:
        items:
          $ref: '#/definitions/dto.CreateProductVariantDTO'
        type: array
    required:
    - name
    - variants
    type: object
  dto.CreateProductVariantDTO:
    properties:
      color:
        maxLength: 30
        minLength: 1
        type: string
      price:
        type: number
      size:
        maxLength: 30
        minLength: 1
        type: string
      sku:
        maxLength: 50
        minLength: 2
        type: string
      stock:
        minimum: 0
        type: integer
      taxRate:
        maximum: 1
        minimum: 0
        type: number
    required:
    - price
    - sku
    - stock
    type: object
  dto.UpdateCustomerDTO:
    properties:
      address:
        $ref: '#/definitions/dto.AddressOptional'
      company:
        maxLength: 100
        type: string
      email:
        maxLength: 100
        type: string
      firstName:
        maxLength: 100
        type: string
      lastName:
        maxLength: 100
        type: string
    type: object
  dto.UpdateDeliveryInfoDTO:
    properties:
      address:
        $ref: '#/definitions/model.Address'
      date:
        type: string
      status:
        allOf:
        - $ref: '#/definitions/model.DeliveryStatus'
        enum:
        - pending
        - shipped
        - delivered
        - cancelled
      transportFare:
        minimum: 0
        type: number
    type: object
  dto.UpdateInvoiceDTO:
    properties:
      dueDate:
        description: Allow optional update of DueDate
        type: string
      notes:
        type: string
      status:
        enum:
        - draft
        - issued
        - paid
        - partially_paid
        - cancelled
        type: string
    type: object
  dto.UpdateOrderDTO:
    properties:
      customerId:
        type: integer
      deliver:
        $ref: '#/definitions/dto.UpdateDeliveryInfoDTO'
      discount:
        $ref: '#/definitions/dto.CreateDiscountInfoDTO'
      items:
        items:
          $ref: '#/definitions/dto.CreateOrderItemDTO'
        type: array
      notes:
        maxLength: 1000
        type: string
      status:
        allOf:
        - $ref: '#/definitions/model.OrderStatus'
        enum:
        - pending
        - approved
        - delivered
        - cancelled
    type: object
  dto.UpdateOrgDTO:
    description: Organization update request
    properties:
      address:
        allOf:
        - $ref: '#/definitions/dto.AddressOptional'
        description: Address of the organization
      email:
        description: Contact email
        example: contact@openb2b.io
        type: string
      logo:
        description: Logo URL of the organization
        example: https://example.com/logo.png
        type: string
      name:
        description: Name of the organization
        example: OpenB2B
        maxLength: 50
        minLength: 3
        type: string
      organizationName:
        description: Full legal organization name
        example: OpenB2B Technologies Inc.
        maxLength: 50
        minLength: 3
        type: string
      organizationUrl:
        description: Official website URL
        example: https://openb2b.io
        type: string
      phone:
        description: Contact phone
        example: +1-202-555-0199
        maxLength: 50
        minLength: 10
        type: string
    type: object
  dto.UpdateProductDTO:
    properties:
      category:
        maxLength: 50
        minLength: 2
        type: string
      description:
        maxLength: 1000
        minLength: 2
        type: string
      imageUrl:
        type: string
      name:
        maxLength: 100
        minLength: 2
        type: string
    type: object
  dto.UpdateVariantDTO:
    properties:
      color:
        maxLength: 30
        minLength: 1
        type: string
      price:
        type: number
      size:
        maxLength: 30
        minLength: 1
        type: string
      stock:
        minimum: 0
        type: integer
      taxRate:
        maximum: 1
        minimum: 0
        type: number
    type: object
  invoice.APIResponseInvoice:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/model.Invoice'
      message:
        type: string
    type: object
  model.Address:
    properties:
      address:
        type: string
      city:
        type: string
      country:
        type: string
      state:
        type: string
      zip:
        type: string
    type: object
  model.Customer:
    properties:
      address:
        $ref: '#/definitions/model.Address'
      company:
        type: string
      created_at:
        type: string
      email:
        type: string
      firstName:
        maxLength: 100
        type: string
      id:
        type: integer
      lastName:
        maxLength: 100
        type: string
      orders:
        items:
          $ref: '#/definitions/model.Order'
        type: array
      org:
        $ref: '#/definitions/model.Org'
      orgId:
        type: integer
      phoneNumber:
        type: string
      updated_at:
        type: string
    required:
    - firstName
    - lastName
    type: object
  model.DeliveryInfo:
    properties:
      address:
        $ref: '#/definitions/model.Address'
      at:
        type: string
      date:
        type: string
      status:
        $ref: '#/definitions/model.DeliveryStatus'
      transportFare:
        type: number
    type: object
  model.DeliveryStatus:
    enum:
    - pending
    - shipped
    - delivered
    - cancelled
    type: string
    x-enum-varnames:
    - DeliveryPending
    - DeliveryShipped
    - DeliveryDelivered
    - DeliveryCancelled
  model.DiscountInfo:
    properties:
      amount:
        type: number
      type:
        $ref: '#/definitions/model.DiscountType'
    type: object
  model.DiscountType:
    enum:
    - percentage
    - fixed
    type: string
    x-enum-varnames:
    - DiscountPercentage
    - DiscountFixed
  model.Invoice:
    properties:
      created_at:
        type: string
      currency:
        type: string
      customerAddress:
        $ref: '#/definitions/model.Address'
      customerEmail:
        type: string
      customerName:
        type: string
      customerPhone:
        type: string
      discountTotal:
        type: number
      dueDate:
        type: string
      id:
        type: integer
      invoiceNumber:
        type: string
      issuedAt:
        type: string
      items:
        items:
          $ref: '#/definitions/model.InvoiceItem'
        type: array
      notes:
        type: string
      order:
        $ref: '#/definitions/model.Order'
      orderId:
        type: integer
      orgId:
        type: integer
      pdf_url:
        type: string
      status:
        $ref: '#/definitions/model.InvoiceStatus'
      subtotal:
        type: number
      taxTotal:
        type: number
      total:
        type: number
      updated_at:
        type: string
    type: object
  model.InvoiceItem:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      invoiceID:
        description: Link to invoice
        type: integer
      lineTotal:
        description: Quantity * UnitPrice + TaxAmount
        type: number
      org:
        $ref: '#/definitions/model.Org'
      orgID:
        type: integer
      quantity:
        type: integer
      sku:
        type: string
      subtotal:
        description: Sum of all item totals before discount and tax
        type: number
      taxAmount:
        type: number
      unitPrice:
        type: number
      updated_at:
        type: string
      variant:
        $ref: '#/definitions/model.Variant'
      variantID:
        type: integer
    type: object
  model.InvoiceStatus:
    enum:
    - draft
    - pro_forma
    - issued
    - paid
    - overdue
    - cancelled
    - partially_paid
    type: string
    x-enum-varnames:
    - InvoiceStatusDraft
    - InvoiceStatusProForma
    - InvoiceStatusIssued
    - InvoiceStatusPaid
    - InvoiceStatusOverdue
    - InvoiceStatusCancelled
    - InvoiceStatusPartiallyPaid
  model.Order:
    properties:
      appliedDiscount:
        description: Actual discount applied
        type: number
      created_at:
        type: string
      customer:
        $ref: '#/definitions/model.Customer'
      customerId:
        type: integer
      delivery:
        $ref: '#/definitions/model.DeliveryInfo'
      discount:
        $ref: '#/definitions/model.DiscountInfo'
      discountTotal:
        description: / ItemDiscountTotal + AppliedDiscount
        type: number
      id:
        type: integer
      invoices:
        items:
          $ref: '#/definitions/model.Invoice'
        type: array
      itemDiscountTotal:
        description: sum of all per-item discounts
        format: float64
        type: number
      items:
        items:
          $ref: '#/definitions/model.OrderItem'
        type: array
      notes:
        type: string
      orderNumber:
        type: string
      org:
        $ref: '#/definitions/model.Org'
      orgId:
        type: integer
      status:
        $ref: '#/definitions/model.OrderStatus'
      subtotal:
        description: sum of item (unitPrice * qty), before discounts & tax
        type: number
      taxAmount:
        description: Sum of all item tax amounts
        type: number
      total:
        description: final payable amount = sum of all item totals
        type: number
      updated_at:
        type: string
    type: object
  model.OrderItem:
    properties:
      appliedDiscount:
        description: Actual discount applied
        type: number
      appliedOrderDiscount:
        description: proportional share of order-level discount
        type: number
      created_at:
        type: string
      discount:
        $ref: '#/definitions/model.DiscountInfo'
      id:
        type: integer
      notes:
        type: string
      orderId:
        type: integer
      orgId:
        type: integer
      product:
        $ref: '#/definitions/model.Product'
      productId:
        type: integer
      quantity:
        type: integer
      sku:
        type: string
      taxAmount:
        description: tax charged on this line (after discounts)
        type: number
      taxRate:
        description: e.g., 0.10 for 10%
        type: number
      total:
        description: (UnitPrice*Qty - discounts) + tax
        type: number
      unitPrice:
        type: number
      updated_at:
        type: string
      variant:
        $ref: '#/definitions/model.Variant'
      variantId:
        type: integer
    type: object
  model.OrderStatus:
    enum:
    - pending
    - approved
    - delivered
    - cancelled
    type: string
    x-enum-varnames:
    - OrderStatusPending
    - OrderStatusApproved
    - OrderStatusDelivered
    - OrderStatusCancelled
  model.Org:
    description: Organization response model
    properties:
      address:
        $ref: '#/definitions/model.Address'
      created_at:
        type: string
      customers:
        items:
          $ref: '#/definitions/model.Customer'
        type: array
      email:
        maxLength: 50
        type: string
      id:
        type: integer
      logo:
        type: string
      name:
        maxLength: 50
        type: string
      onboardedAt:
        type: boolean
      orders:
        items:
          $ref: '#/definitions/model.Order'
        type: array
      organizationName:
        maxLength: 50
        type: string
      organizationUrl:
        maxLength: 100
        type: string
      phone:
        maxLength: 50
        type: string
      products:
        items:
          $ref: '#/definitions/model.Product'
        type: array
      updated_at:
        type: string
      users:
        items:
          $ref: '#/definitions/model.User'
        type: array
    required:
    - email
    - name
    - organizationName
    - phone
    type: object
  model.Product:
    description: Product response model
    properties:
      category:
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      imageUrl:
        type: string
      name:
        type: string
      org:
        $ref: '#/definitions/model.Org'
      orgId:
        type: integer
      updated_at:
        type: string
      variants:
        items:
          $ref: '#/definitions/model.Variant'
        type: array
    type: object
  model.Role:
    enum:
    - distributor
    - admin
    - viewer
    type: string
    x-enum-varnames:
    - RoleOwner
    - RoleAdmin
    - RoleViewer
  model.User:
    description: User response model
    properties:
      address:
        $ref: '#/definitions/model.Address'
      clerkId:
        type: string
      created_at:
        type: string
      email:
        maxLength: 50
        type: string
      firstName:
        maxLength: 100
        type: string
      id:
        type: integer
      lastName:
        maxLength: 100
        type: string
      org:
        allOf:
        - $ref: '#/definitions/model.Org'
        description: optional relation
      orgId:
        description: nullable foreign key
        type: integer
      phone:
        maxLength: 50
        type: string
      role:
        $ref: '#/definitions/model.Role'
      updated_at:
        type: string
    required:
    - email
    - firstName
    - lastName
    type: object
  model.Variant:
    description: Variant response model
    properties:
      color:
        type: string
      created_at:
        type: string
      id:
        type: integer
      orgId:
        description: needed for sku uniqueness per org
        type: integer
      price:
        type: number
      productId:
        type: integer
      size:
        type: string
      sku:
        type: string
      stock:
        type: integer
      taxRate:
        type: number
      updated_at:
        type: string
    type: object
  order.APIResponseOrder:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/model.Order'
      message:
        type: string
    type: object
  product.APIResponseProduct:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/model.Product'
      message:
        type: string
    type: object
  product.APIResponseVariant:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/model.Variant'
      message:
        type: string
    type: object
  response.APIResponseString:
    properties:
      code:
        type: integer
      data:
        type: string
      message:
        type: string
    type: object
  types.WebhookEvent:
    properties:
      created_at:
        description: Event creation timestamp
        example: "2025-08-26T18:00:00Z"
        type: string
      data:
        additionalProperties: true
        description: Data payload of the webhook
        type: object
      id:
        description: ID of the webhook event
        example: evt_123456
        type: string
      type:
        description: Type of the webhook event (e.g., "user.created")
        example: user.created
        type: string
      webhook_id:
        description: ID of the webhook that triggered this event
        example: wh_987654
        type: string
    type: object
host: localhost:3000
info:
  contact:
    email: support@openb2b.com
    name: API Support
    url: http://openb2b.com/support
  description: Open-source multi-tenant ordering & invoicing platform API.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://openb2b.com/terms/
  title: OpenB2B API
  version: "1.0"
paths:
  /customers:
    get:
      consumes:
      - application/json
      description: Returns a paginated list of customers. Supports filtering, sorting,
        searching, and preloading.
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of items per page (default: 20, max: 100)'
        in: query
        name: limit
        type: integer
      - description: Sort by field, e.g. 'created_at desc'
        in: query
        name: sort
        type: string
      - description: Comma-separated list of relations to preload. relation must start
          with uppercase. e.g. 'Orders,Org'
        in: query
        name: preloads
        type: string
      - description: Comma-separated list of fields to search (must be allowed)
        in: query
        name: search_fields
        type: string
      - description: Filter by first name
        in: query
        name: first_name
        type: string
      - description: Filter by last name
        in: query
        name: last_name
        type: string
      - description: Filter by phone number
        in: query
        name: phone_number
        type: string
      - description: Filter by email
        in: query
        name: email
        type: string
      - description: Filter by company
        in: query
        name: company
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/customer.APIResponseCustomer'
        "400":
          description: Invalid filter parameters
          schema:
            $ref: '#/definitions/apperrors.APIError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/apperrors.APIError'
      security:
      - BearerAuth: []
      summary: List customers with filtering and pagination
      tags:
      - customers
    post:
      consumes:
      - application/json
      description: Create a new customer
      parameters:
      - description: Customer payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateCustomerDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/customer.APIResponseCustomer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
      security:
      - BearerAuth: []
      summary: Create customers
      tags:
      - customers
  /customers/{id}:
    delete:
      description: Delete a customer by ID
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete customer
      tags:
      - customers
    get:
      description: Get a customer by ID
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/customer.APIResponseCustomer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
      security:
      - BearerAuth: []
      summary: Get customer
      tags:
      - customers
    patch:
      consumes:
      - application/json
      description: Update an existing customer by ID
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update customer payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateCustomerDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/customer.APIResponseCustomer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
      security:
      - BearerAuth: []
      summary: Update customer
      tags:
      - customers
  /invoices:
    get:
      consumes:
      - application/json
      description: Returns a paginated list of invoices. Supports filtering, sorting,
        searching, and preloading.
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of items per page (default: 20, max: 100)'
        in: query
        name: limit
        type: integer
      - description: Sort by field, e.g. 'created_at desc'
        in: query
        name: sort
        type: string
      - description: Comma-separated list of relations to preload. relation must start
          with uppercase. e.g. 'Orders,Org'
        in: query
        name: preloads
        type: string
      - description: Comma-separated list of fields to search (must be allowed)
        in: query
        name: search_fields
        type: string
      - description: Filter by order number
        in: query
        name: order_number
        type: string
      - description: Filter by notes
        in: query
        name: notes
        type: string
      - description: Filter by status
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/invoice.APIResponseInvoice'
        "400":
          description: Invalid filter parameters
          schema:
            $ref: '#/definitions/apperrors.APIError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/apperrors.APIError'
      security:
      - BearerAuth: []
      summary: List invoices with filtering and pagination
      tags:
      - invoices
    post:
      consumes:
      - application/json
      description: Create a new invoice
      parameters:
      - description: Invoice payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateInvoiceDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/invoice.APIResponseInvoice'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
      security:
      - BearerAuth: []
      summary: Create invoices
      tags:
      - invoices
  /invoices/{id}:
    delete:
      description: Delete a invoice by ID
      parameters:
      - description: Invoice ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete invoice
      tags:
      - invoices
    get:
      description: Get a invoice by ID
      parameters:
      - description: Invoice ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/invoice.APIResponseInvoice'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
      security:
      - BearerAuth: []
      summary: Get invoice
      tags:
      - invoices
    patch:
      consumes:
      - application/json
      description: Update an existing invoice by ID
      parameters:
      - description: Invoice ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update invoice payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateInvoiceDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/invoice.APIResponseInvoice'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
      security:
      - BearerAuth: []
      summary: Update invoice
      tags:
      - invoices
  /invoices/{id}/issue:
    post:
      consumes:
      - application/json
      description: Issue an invoice by ID
      parameters:
      - description: Invoice ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.APIResponseString'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
      security:
      - BearerAuth: []
      summary: Issue an invoice
      tags:
      - invoices
  /orders:
    get:
      consumes:
      - application/json
      description: Returns a paginated list of orders. Supports filtering, sorting,
        searching, and preloading.
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of items per page (default: 20, max: 100)'
        in: query
        name: limit
        type: integer
      - description: Sort by field, e.g. 'created_at desc'
        in: query
        name: sort
        type: string
      - description: Comma-separated list of relations to preload. relation must start
          with uppercase
        in: query
        name: preloads
        type: string
      - description: Comma-separated list of fields to search (must be allowed)
        in: query
        name: search_fields
        type: string
      - description: Filter by order number
        in: query
        name: order_number
        type: string
      - description: Filter by notes
        in: query
        name: notes
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/order.APIResponseOrder'
        "400":
          description: Invalid filter parameters
          schema:
            $ref: '#/definitions/apperrors.APIError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/apperrors.APIError'
      security:
      - BearerAuth: []
      summary: List orders with filtering and pagination
      tags:
      - orders
    post:
      consumes:
      - application/json
      description: Create a new order
      parameters:
      - description: Order payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateOrderDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/order.APIResponseOrder'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
      security:
      - BearerAuth: []
      summary: Create orders
      tags:
      - orders
  /orders/{id}:
    delete:
      description: Delete a order by ID
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete order
      tags:
      - orders
    get:
      description: Get a order by ID
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/order.APIResponseOrder'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
      security:
      - BearerAuth: []
      summary: Get order
      tags:
      - orders
    patch:
      consumes:
      - application/json
      description: Update an existing order by ID
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update order payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateOrderDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/order.APIResponseOrder'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
      security:
      - BearerAuth: []
      summary: Update order
      tags:
      - orders
  /orgs:
    post:
      consumes:
      - application/json
      description: Create a new organization
      parameters:
      - description: Organization payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateOrgDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Org'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
      security:
      - BearerAuth: []
      summary: Create organization
      tags:
      - organizations
  /orgs/{id}:
    delete:
      description: Delete an organization by ID
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Deleted organization ID
          schema:
            type: integer
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete organization
      tags:
      - organizations
    get:
      description: Get an organization by ID
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Org'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
      security:
      - BearerAuth: []
      summary: Get organization
      tags:
      - organizations
    put:
      consumes:
      - application/json
      description: Update an existing organization by ID
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update organization payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateOrgDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Org'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
      security:
      - BearerAuth: []
      summary: Update organization
      tags:
      - organizations
  /products:
    get:
      consumes:
      - application/json
      description: Returns a paginated list of products. Supports filtering, sorting,
        searching, and preloading.
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of items per page (default: 20, max: 100)'
        in: query
        name: limit
        type: integer
      - description: Sort by field, e.g. 'created_at desc'
        in: query
        name: sort
        type: string
      - description: Comma-separated list of relations to preload. relation must start
          with uppercase
        in: query
        name: preloads
        type: string
      - description: Comma-separated list of fields to search (must be allowed)
        in: query
        name: search_fields
        type: string
      - description: Filter by product name
        in: query
        name: name
        type: string
      - description: Filter by last name
        in: query
        name: last_name
        type: string
      - description: Filter by phone number
        in: query
        name: phone_number
        type: string
      - description: Filter by email
        in: query
        name: email
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/product.APIResponseProduct'
        "400":
          description: Invalid filter parameters
          schema:
            $ref: '#/definitions/apperrors.APIError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/apperrors.APIError'
      security:
      - BearerAuth: []
      summary: List products with filtering and pagination
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Create a new product
      parameters:
      - description: Product payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateProductDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/product.APIResponseProduct'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
      security:
      - BearerAuth: []
      summary: Create products
      tags:
      - products
  /products/{id}:
    delete:
      description: Delete a product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete product
      tags:
      - products
    get:
      description: Get a product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/product.APIResponseProduct'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
      security:
      - BearerAuth: []
      summary: Get product
      tags:
      - products
    patch:
      consumes:
      - application/json
      description: Update an existing product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update product payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateProductDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/product.APIResponseProduct'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
      security:
      - BearerAuth: []
      summary: Update product
      tags:
      - products
  /products/{id}/variants/{id}:
    delete:
      description: Delete a variant by product ID and variant ID
      parameters:
      - description: Product ID
        in: path
        name: productId
        required: true
        type: integer
      - description: Variant ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete variant
      tags:
      - variants
    get:
      description: Get a variant by product ID and variant ID
      parameters:
      - description: Product ID
        in: path
        name: productId
        required: true
        type: integer
      - description: variant ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/product.APIResponseVariant'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
      security:
      - BearerAuth: []
      summary: Get variant
      tags:
      - variants
  /products/{productId}/variants:
    post:
      consumes:
      - application/json
      description: Create a new variant
      parameters:
      - description: Product ID
        in: path
        name: productId
        required: true
        type: integer
      - description: Variant payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateProductVariantDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/product.APIResponseVariant'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
      security:
      - BearerAuth: []
      summary: Create variant
      tags:
      - variants
  /products/{productId}/variants/{id}:
    patch:
      consumes:
      - application/json
      description: Update an existing variant by product ID and variant ID
      parameters:
      - description: Product ID
        in: path
        name: productId
        required: true
        type: integer
      - description: Variant ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update variant payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateVariantDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/product.APIResponseVariant'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
      security:
      - BearerAuth: []
      summary: Update variant
      tags:
      - variants
  /users/me:
    get:
      description: Get an authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
      security:
      - BearerAuth: []
      summary: Get authenticated user
      tags:
      - users
  /webhooks/handleEvents:
    post:
      consumes:
      - application/json
      description: Handles incoming webhook events from Clerk. The request body must
        match the WebhookEvent structure.
      parameters:
      - description: Webhook Event Payload
        in: body
        name: event
        required: true
        schema:
          $ref: '#/definitions/types.WebhookEvent'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperrors.APIErrorResponse'
      summary: Receive Clerk webhook events
      tags:
      - webhooks
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
